<?php
/**
 * @file
 * This module provides publication-related functionality (i.e. Views theming)
 */

/**
 * Implements hook_init
 */
function hc_publications_init() {
  $path = drupal_get_path('module', 'hc_publications');
  drupal_add_js($path . "/hc_publications.js");
}

/**
 * Implements hook_block_info
 */
function hc_publications_block_info() {
  $blocks = array();
  
  $blocks['publications_per_user'] = array(
    'info' => t('Publications per user'),
  );
  
  $blocks['publications_navigation'] = array(
    'info' => t('Publications navigation'),
  );
  
  return $blocks;
}

/**
 * Implements hook_block_view
 */
function hc_publications_block_view($delta = '') {
  $block = array();
  
  switch ($delta) {
    case 'publications_per_user':
      $block['subject'] = t('Publications');
      $block['content'] = _hc_publications_block_publications_per_user_render();
      break;
    case 'publications_navigation':
      $block['subject'] = t('Publications');
      $block['content'] = _hc_publications_block_publications_navigation_render();
  }
  
  return $block;
}


/**
 * Implements hook_theme
 */
function hc_publications_theme($existing, $type, $theme, $path) {
  return array(
    // main catalog pages
    'views_view_field__publications__nothing' => array( 
      'arguments' => array('view' => FALSE, 'field' => FALSE, 'row' => FALSE),
      'original hook' => 'views_view_field',
      'template' => 'views-view-field-publications--nothing',
    ),
    'views_view_field__working_papers__page__field_work_paper_user' =>array( 
      'arguments' => array('view' => FALSE, 'field' => FALSE, 'row' => FALSE),
      'original hook' => 'views_view_field',
      'template' => 'views-view-field--working-papers--page--field-work-paper-user',
    ),

  );
}

/**
 * Implements hook_views_api
 */
function hc_publications_views_api() {
  return array(
    'api' => 3,
  );
}


/**
 * Preprocess function for authors publication
 */
function hc_publications_preprocess_views_view_field__publications__nothing(&$vars) {
  $output = "";
  $output_type = "";
	$nid = $vars['row']->nid;
	$node = node_load($nid);

	$publication_types = _hc_publications_get_types();
	
  $publication_type_field = field_get_items('node', $node, 'field_pub_type');
  $publication_type = $publication_type_field[0]['tid'];
  
  // get all fields for this node
  $pub_full_title_field = field_get_items('node', $node, 'field_pub_full_title');
  if (isset($pub_full_title_field[0]['value'])) {
    $pub_title = $pub_full_title_field[0]['value'];
  } else {
    $pub_title = $node->title;
  } 
  $pub_abstract_field = field_get_items('node', $node, 'field_pub_abstract');
  $pub_publication_year_field = field_get_items('node', $node, 'field_pub_publication_year');
  $pub_abstract_field = field_get_items('node', $node, 'field_pub_abstract');
  $pub_keywords_field = field_get_items('node', $node, 'field_pub_keywords');
  $pub_email_field = field_get_items('node', $node, 'field_pub_email');
  $pub_file_field = field_get_items('node', $node, 'field_pub_file');
  
  $pub_authors_field = field_get_items('node', $node, 'field_pub_authors');
  
  // ABSTRACT
  if (count($pub_abstract_field)) {
    $output_abstract = $pub_abstract_field[0]['safe_value'];
  }

  // AUTHORS
  $output_authors = "";
  $all_authors = array();
  if (is_array($pub_authors_field) && count($pub_authors_field)) {
    foreach ($pub_authors_field as $author) {
      $author_field_collection_item = entity_metadata_wrapper('field_collection_item', $author['value']);
      $author_type = $author_field_collection_item->field_pub_authors_type->value();
      if ($author_type == 'internal') {
        $author_internal = $author_field_collection_item->field_pub_authors_internal->value();
        if ($author_internal) {
	        $author_internal_firstname_field = field_get_items('user', $author_internal, 'field_user_firstname');
	        $author_internal_lastname_field = field_get_items('user', $author_internal, 'field_user_lastname');
          $author_internal_c4 = field_get_items('user', $author_internal, 'field_user_uit_dienst');
          if ($author_internal_c4) {
            if (is_array($author_internal_c4) && isset($author_internal_c4[0]['value']) && $author_internal_c4[0]['value'] == 1) {
              $author_complete = strtoupper($author_internal_lastname_field[0]['value']) . ", " . $author_internal_firstname_field[0]['value'];
            } else {
	            $author_complete = l(strtoupper($author_internal_lastname_field[0]['value']) . ", " . $author_internal_firstname_field[0]['value'], 'user/' . $author_internal->uid);                      
            }
          } else {
	          $author_complete = l(strtoupper($author_internal_lastname_field[0]['value']) . ", " . $author_internal_firstname_field[0]['value'], 'user/' . $author_internal->uid);          
          }
	        $all_authors[] = $author_complete;
	      }
      } else {
        $author_external = $author_field_collection_item->field_pub_authors_external->value();
        $all_authors[] = $author_external;
      }
    }
  }
  
	if (is_array($all_authors) && count($all_authors)) {
	  if (count($all_authors) > 1) {
	    for ($i = 0; $i < (count($all_authors) - 2); $i++) {
	      $output_authors .= $all_authors[$i] . ", ";
	    }
	    $output_authors .= $all_authors[count($all_authors) - 2] . " & " . $all_authors[count($all_authors) - 1];
	  } else {
	    $output_authors = $all_authors[0];
	  }
	}
	
  // YEAR	
  $pub_year = $pub_publication_year_field[0]['value'];


  $output = sprintf('<strong>%s</strong> (%s) %s', $output_authors, $pub_year, $pub_title);

  $vars['output'] = $output;
  
  // PUBLICATION TYPE
  $publication_type_final = array_search($publication_type, $publication_types);
  
  $vars['output_type'] = "<div class='publication-type'>category: " . $publication_type_final . "</div>";
  
  // LINK
  $vars['output_links'] = "<div class='links'><a href='#' class='toggle-abstract'>show abstract</a> &bull; " . l('more info', 'node/' . $nid) . "</div>";
  
  // ABSTRACT
  $vars['output_abstract'] = "<div class='abstract'>" . $output_abstract . "</div>";
}


/**
 * Implements hook_form_alter: replace author reference user ids by name
 */
function hc_publications_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    if (isset($form['field_pub_authors_uid']) && isset($form['field_pub_authors_uid']['#options']) && is_array($form['field_pub_authors_uid']['#options'])) {
      foreach ($form['field_pub_authors_uid']['#options'] as $key => $option) {
        if (is_numeric($key)) {
          $user = entity_metadata_wrapper('user', $key);
          $firstname = $user->field_user_firstname->value();
          $lastname = $user->field_user_lastname->value();
          $full_name = $lastname . " " . $firstname;
          asort($form['field_pub_authors_uid']['#options']);
          $form['field_pub_authors_uid']['#options'][$key] = $full_name;
        }
      }
    }
    if (isset($form['author']) && isset($form['author']['#options']) && is_array($form['author']['#options'])) {
      foreach ($form['author']['#options'] as $key => $option) {
        if (is_numeric($key)) {
          $user = entity_metadata_wrapper('user', $key);
          $firstname = $user->field_user_firstname->value();
          $lastname = $user->field_user_lastname->value();
          $full_name = $lastname . " " . $firstname;
          asort($form['author']['#options']);
          $form['author']['#options'][$key] = $full_name;
        }
      }
    }

  }
}


/**
 * Helper function for defining publication types
 */
function _hc_publications_get_types() {
	// vid for vocabulary "Publication Types" = 6
	$tree = taxonomy_get_tree(2);

  $publication_types = array();
	foreach ($tree as $leaf) {
    $publication_types[$leaf->name] = $leaf->tid;
	}
	
	return $publication_types;

}


/** 
 * Preprocess function for working papers authors
 */
/*
function hc_publications_preprocess_views_view_field__working_papers__page__field_work_paper_user(&$vars) {
  $output = "";
  $output_type = "";
	$nid = $vars['row']->nid;
	$wip_wrapper = entity_metadata_wrapper('node', $nid);
	$wip_users = $wip_wrapper->field_work_paper_user->value();
	$wip_extra_authors = $wip_wrapper->field_work_paper_user_extra->value();

	if (is_array($wip_users) && count($wip_users)) {
	  $authors = array();
	  $output_authors = "";
	  foreach ($wip_users as $author) {
	    $uid = $author->uid;
	    $author_wrapper = entity_metadata_wrapper('user', $author);
	    $author_firstname = $author_wrapper->field_user_firstname->value();
	    $author_lastname = $author_wrapper->field_user_lastname->value();
	    $author_c4 = $author_wrapper->field_user_c4->value();
      $author_fullname = $author_lastname . " " . $author_firstname;
      if (isset($author_c4[0])) {
        $author_link = $author_fullname;
      } else {      
        $author_link = l($author_fullname, 'user/' . $uid);
      }
      $authors[] = $author_link;
	  }
	}
	
	if (is_array($wip_extra_authors) && count($wip_extra_authors)) {
    foreach ($wip_extra_authors as $extra_author) {
      $authors[] = $extra_author;
    }
	}
	
	$output_authors = "";

  if (count($authors) == 1) {
    $output_authors = $authors[0];
  }
  if (count($authors) == 2) {
    $output_authors = $authors[0] . " & " . $authors[1];
  }

  if (count($authors) > 2) {
    for ($i = 0; $i < (count($authors) - 2); $i++) {
      $output_authors .= $authors[$i] . ", ";
    }
    $output_authors .= $authors[count($authors) - 2];
    
    $output_authors .= " & " . $authors[count($authors) - 1];
  }
	
  $vars['authors'] = $output_authors;
}
*/

/**
 * Helper function for rendering block Publications per user
 */
function _hc_publications_block_publications_per_user_render() {

  $output = "";

  // get user id
  if (arg(0) == 'user' && is_numeric(arg(1))) {
  
    $nids = array();
  
    $uid = arg(1);
    
    $result = db_query("SELECT a.entity_id AS nid, a.field_pub_authors_value AS fieldcollection, ai.entity_id AS authorid
      FROM {field_data_field_pub_authors} a, {field_data_field_pub_authors_internal} ai 
      WHERE a.field_pub_authors_value = ai.entity_id AND ai.field_pub_authors_internal_target_id=:uid;
    ", array(':uid' => $uid));
    
    foreach ($result as $row) {
      $nids[] = $row->nid;
    }

    if (count($nids)) {
      $output = views_embed_view('publications', 'pub_per_user', implode($nids, ','));    
    }

  }
  
  return $output;
}


/**
 * Helper function for rendering block Publications Navigation
 */
function _hc_publications_block_publications_navigation_render() {

  $core_themes_publications = array();
  $output_core_themes_publications = "";

  // get a list of core themes with publications
  $result = db_query("SELECT DISTINCT field_pub_core_theme_target_id AS corethemeid FROM {field_revision_field_pub_core_theme};");
  foreach ($result as $row) {
    $core_theme = node_load($row->corethemeid);
    $core_themes_publications[] = l($core_theme->title, '/publications/' . $row->corethemeid, array('absolute' => TRUE));
  }
  
  if (count($core_themes_publications)) {
    $output_core_themes_publications = theme('item_list', array('items' => $core_themes_publications));
  }

  $output = "<div class='navigation-list'>"
    . "<ul>"
    . "<li><a href='/edge-working-paper-series'>EDGE Working Paper Series</a></li>"
    . "<li>"
    . "<a href='/publications'>EDGE Publications</a>"
    . $output_core_themes_publications
    . "</li>"
    . "</ul>"
    . "</div>";

  
  return $output;

}